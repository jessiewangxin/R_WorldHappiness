library(data.table)
library(dplyr)
library(lubridate)
library(readxl)
library(lightgbm)
library(Matrix)
library(stringr)
library(pROC)

#### Instructions ####
# 0. Go through the DQ output from a version of data that was of poor quality and comment on potential issues present in the data
# 1. Go through existing code and make comments about what the code is doing, including a high-level description of the code
#    delivered as an email
# 2. Interpret the results of the modeling
# 3. Evaluate the methodology
# 4. Create a simple dashboard with Shiny that shows admission rate and total (not admission-specific) PMPM by age and gender
#    Note: if a Shiny dashboard is not feasible, an Excel report in lieu of it would also be accepted for less credit
# 5. Create another dashboard or page on the same dashboard that has a table showing admission rate by condition category
#    Note: if a Shiny dashboard is not feasible, an Excel report in lieu of it would also be accepted for less credit

# Deliverable:
# - A brief summary of potential issues with the data run through DQ, written as an email to your manager.
#   Hint: there are 4 issues. Feel free to list more than that; you will not be penalized for false positives. 
# - This code with comments
# - A brief description of what this script is doing, written as an email to your manager. Pretend this is an old set of code
#   that your manager found and thought could be leveraged for some product development work.
# - An outline of current results (as calculated via AUC), suggested improvements and alternatives to the predictive modeling 
#   approach/methodology, and ways to assess model performance
# - Working code for the dashboards and any notes on how to use them (beyond running the app), if necessary
######################

setwd("C:/Users/tyokoyama/OneDrive - sbactuaries.com/Documents/Recruiting/Case Study Work/Nvoyance Case Study/")
elig <- fread("membership_v3_obscure.csv")
med_clm <- fread("medical_claims_v3_obscure.csv")

elig[,yr:=floor(Elig_Year_Month/100)]
med_clm[,service_date:=ymd(service_date)]
med_clm[,inc_yyyymm:=year(service_date)*100+month(service_date)]

cc_mapping <- read_excel("HHS-HCC 2017 Model_cc.xlsx", sheet = "Code-Updated")

dx_long <- med_clm %>% 
  select("member_id","inc_yyyymm",contains("dx")) %>%
  data.table::melt(id.vars = c("member_id","inc_yyyymm"))
setkey(dx_long,value)
cc_long <- dx_long %>%
  merge(cc_mapping, by.x = "value", by.y = "DX")

inp_clm <- med_clm[!is.na(ymd(admission_date))
                  ][(revenue_code %between% c(100, 169) | 
                       revenue_code %between% c(200, 219) | 
                       substr(bill_type_code, 1, 2) %in% c("11", "12")) | 
                      (revenue_code %in% c(22, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 199) 
                       & substr(bill_type_code, 1, 2) %in% c("21", "22"))
                    ,.(member_id,admission_date, discharge_date)] %>%
                    distinct
inp_clm[,admission_date:=ymd(admission_date)] 
inp_clm[,discharge_date:=ymd(discharge_date)]

inp_hdr <- inp_clm[,c("member_id","admission_date","discharge_date")] %>% distinct()

setkey(inp_hdr,member_id,admission_date)
inp_hdr[!is.na(admission_date)
        ,':='(next_adm=shift(as.numeric(admission_date),n=1L,type="lead")
              ,cm_dis=cummax(as.numeric(discharge_date)))
        ,by="member_id"]
inp_hdr[!is.na(admission_date)
        ,':='(indx_0=cumsum((!is.na(next_adm)) & (next_adm - 1 > cm_dis)))
        ,by="member_id"] 
inp_hdr[!is.na(admission_date)
        ,':='(indx=shift(indx_0,type="lag",n=1L,fill=0))
        ,by="member_id"]

setkey(inp_hdr,member_id,indx,admission_date)
inp_hdr_transfer <- inp_hdr[!is.na(admission_date)
                            ,.(ADMDATE_FLAT = as_date(min(as.numeric(admission_date)),origin=lubridate::origin)
                               ,DISDATE_FLAT = as_date(max(as.numeric(discharge_date)),origin=lubridate::origin)
                            )
                            ,by=c("member_id", "indx")]
inp_hdr_transfer[,':='(ADMDATE_FLAT=ymd(ADMDATE_FLAT), DISDATE_FLAT=ymd(DISDATE_FLAT))]
setkey(inp_hdr_transfer,member_id,ADMDATE_FLAT)


inp_clm <- rbindlist(list(
  inp_hdr_transfer[inp_clm,on="member_id",allow.cartesian=T] %>%
                        filter(admission_date %within% interval(ADMDATE_FLAT,DISDATE_FLAT))
                      ,inp_clm[is.na(admission_date)]),fill=T)
inp_clm[,adm_yyyymm:=year(ADMDATE_FLAT)*100+month(ADMDATE_FLAT)]

inp_smry <- inp_clm[,.(adm_cnt=length(unique(ADMDATE_FLAT))),.(member_id,adm_yyyymm)]

mbr_adm <- elig %>%
  merge(inp_smry, by.x=c("Member_ID","Elig_Year_Month"), by.y=c("member_id","adm_yyyymm"), all.x=T)

mbr_yr_adm <- mbr_adm[,.(adm_cnt=sum(coalesce(adm_cnt,0))),.(Member_ID,yr)] %>% rename(member_id = Member_ID)
mbr_yr_adm[,mbr_yr_id:=paste0(member_id,"_",yr)]
mbr_yr_adm[,member_id:=NULL]
mbr_yr_adm[,yr:=NULL]
setkey(mbr_yr_adm,mbr_yr_id)

mbr_demo <- elig %>%
  select(Member_ID,Age,Gender,yr) %>%
  data.table::melt(id.vars=c("Member_ID","yr"))

mbr_demo <- mbr_demo[,.(value=min(value)),.(Member_ID,yr,variable)] %>% rename(member_id = Member_ID)

cc_long[,yr:=floor(inc_yyyymm/100)]
cc_long_yr <- cc_long %>% 
  distinct(member_id,yr,HHS_HCC) %>%
  rename(variable=HHS_HCC) %>%
  mutate(value=1)
cc_long_yr[,variable:=paste0("HHS_HCC",variable)]

feat_vars <- rbindlist(list(
  mbr_demo
  ,cc_long_yr
))

feat_vars[,mbr_yr_id:=paste0(member_id,"_",yr)]
feat_vars[,member_id:=NULL]
feat_vars[,yr:=NULL]

feat_vars <- feat_vars[mbr_yr_id %in% mbr_yr_adm$mbr_yr_id]

setkey(feat_vars,variable)
cols <- (feat_vars$variable %>% unique)
feat_vars[,col_index:=as.numeric(factor(variable,levels = cols[str_order(cols)]))]

feat_vars[,row_index:=frank(mbr_yr_id,ties.method = "dense")]

#### checks ####
feat_vars[,max(row_index)]==nrow(mbr_yr_adm)
feat_vars[,max(col_index)]
####

feat_vars_sparse <- with(feat_vars[,c("row_index","col_index","value")],sparseMatrix(i = row_index
                                                                                  ,j = col_index
                                                                                  ,x = value
                                                                                  ,dims = c(max(row_index),max(feat_vars$col_index))
                                                                                  ,dimnames = list(NULL,cols[str_order(cols)])
))

feat_vars_sparse_lgbmds <- lgb.Dataset(feat_vars_sparse
                                   ,label = as.numeric(mbr_yr_adm$adm_cnt>0)
                                   ,colnames = cols[str_order(cols)]
                                   ,feature_pre_filter= F
)

params <- list(
  num_threads = 12
  ,learning_rate = 0.001
  ,feature_fraction = 0.95
  ,min_data_in_leaf = 10
  ,num_leaves = 250
  ,metric = "binary_logloss"
  ,objective = "binary"
  ,is_unbalance = TRUE
)

lgb_mod <- lgb.train(
  params = params
  ,data = feat_vars_sparse_lgbmds
  ,nrounds = 200
)

feat_imp <- lgb.importance(lgb_mod,percentage = T)

preds <- predict(
  lgb_mod
  ,data = feat_vars_sparse
)

auc(roc(mbr_yr_adm$adm_cnt>0,preds)) # 0.9794

